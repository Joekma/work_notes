#coding:utf-8

'''阅读笔记'''

'''建议6：编写函数的4个原则 '''


'''
“原则1　函数设计要尽量短小，嵌套层次不宜过深。所谓短小，就是跟前面所提到的一样尽量避免过长函数，
因为这样不需要上下拉动滚动条就能获得整体感观
，而不是来回翻动屏幕去寻找某个变量或者某条逻辑判断等。
函数中需要用到if、elif、while、for等循环语句的地方，尽量不要嵌套过深，最好能控制在3层以内”

“原则2　函数申明应该做到合理、简单、易于使用。除了函数名能够正确反映其大体功能外，参数的设计也应该简洁明了，参数个数不宜太多。”

“原则3　函数参数设计应该考虑向下兼容。实际工作中我们可能面临这样的情况：随着需求的变更和版本的升级，
在前一个版本中设计的函数可能需要进行一定的修改才能满足这个版本的要求。因此在设计过程中除了着眼当前的需求还得考虑向下兼容”

最好的方法是通过加入默认参数来避免这种退化，做到向下兼容


“原则4　一个函数只做一件事，尽量保证函数语句粒度的一致性。”
'''


'''建议7：将常量集中到一个文件'''


'''建议8：利用assert语句来发现问题'''


'''
断言的使用规范

1   “不要滥用，这是使用断言最基本的原则。若由于断言引发了异常，通常代表程序中存在bug。因此断言应该使用在正常逻辑不可到达的地方或正常情况下总是为真的场合”
2   “如果Python本身的异常能够处理就不要再使用断言。如对于类似于数组越界、类型不匹配、除数为0之类的错误，不建议使用断言来进行处理”
3   “不要使用断言来检查用户的输入。如对于一个数字类型，如果根据用户的设计该值的范围应该是2～10，较好的做法是使用条件判断，并在不符合条件的时候输出错误提示信息”
4   “在函数调用后，当需要确认返回值是否合理时可以使用断言”
5   “当条件是业务逻辑继续下去的先决条件时可以使用断言。如list1和其副本list2，业务继续下去的条件是这两个list必须是一样的，但由于某些不可控因素，如使用了浅拷贝而list1中含有可变对象等，就可以使用断言来判断这两者的关系，如果不相等，则继续运行后面的程序意义不大”
'''

'''建议9：数据交换值的时候不推荐使用中间变量'''


'''建议10：充分利用Lazy evaluation的特性'''

'''
1）避免不必要的计算，带来性能上的提升。

对于Python中的条件表达式if x and y，在x为false的情况下y表达式的值将不再计算。
而对于if x or y，当x的值为true的时候将直接返回，不再计算y的值。因此编程中应该充分利用该特性
因此在编程过程中，如果对于or条件表达式应该将值为真可能性较高的变量写在or的前面，而and则应该推后

2）节省空间，使得无限循环的数据结构成为可能。

“Python中最典型的使用延迟计算的例子就是生成器表达式了，它仅在每次需要计算的时候才通过yield产生所需要的元素。
斐波那契数列在Python中实现起来就显得相当简单，而while True也不会导致其他语言中所遇到的无限循环的问题”

'''

# def fib():
#     a,b = 0,1
#     while True:
#         yield a
#         a,b = b,a+b
#
# from itertools import islice
# print list(islice(fib(),5))




